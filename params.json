{"google":"","body":"\r\nOverview\r\n===\r\n\r\nMono.Data.Sqlite.Orm is an open source library to allow .NET and Mono applications to store data in [SQLite 3 databases](http://www.sqlite.org). It should work in any CLI environment.\r\n\r\nMono.Data.Sqlite.Orm was designed as a quick and convenient database layer. Its design follows from these *goals*:\r\n\r\n* It should be very easy to integrate with existing projects.\r\n  \r\n* It is a thin wrapper over SQLite and should be fast and efficient. (The library should not be the performance bottleneck of your queries.)\r\n  \r\n* It provides very simple methods for executing queries safely (using parameters) and for retrieving the results of those query in a strongly typed fashion.\r\n  \r\n* It works with your data model without forcing you to change your classes. (Contains a small reflection-driven ORM layer.)\r\n  \r\n* It dependends only on Mono.Data.Sqlite on all platforms except Windows Phone which also requires [C# SQLite](http://code.google.com/p/csharp-sqlite)\r\n\r\n* Support for creating entire databases using only compact `Attributes`\r\n\r\nTo do:\r\n\r\n* Support `IQueryable` for constructing queries. You can of course use LINQ on the results of queries, but you cannot use it to construct the queries yet.\r\n\r\n\r\nDocumentation\r\n===\r\n\r\nThe library contains simple attributes that you can use to control the construction of tables. In a simple stock program, you might use:\r\n\r\n    public class Stock\r\n    {\r\n    \t[PrimaryKey, AutoIncrement]\r\n    \tpublic int Id { get; set; }\r\n    \t[MaxLength(8)]\r\n    \tpublic string Symbol { get; set; }\r\n    }\r\n\r\n    public class Valuation\r\n    {\r\n    \t[PrimaryKey, AutoIncrement]\r\n    \tpublic int Id { get; set; }\r\n    \t[Indexed(\"IX_StockId\")]\r\n    \tpublic int StockId { get; set; }\r\n    \tpublic DateTime Time { get; set; }\r\n    \tpublic decimal Price { get; set; }\r\n    }\r\n\r\nWith these, you can automatically generate tables (and update) in your database by calling `CreateTable`:\r\n\r\n    var db = new SqliteSession(\"database.sqlite\");\r\n    db.CreateTable<Stock>();\r\n    db.CreateTable<Valuation>();\r\n\r\nYou can insert rows in the database using `Insert`. If the table contains an auto-incremented primary key, then the value for that key will be available to you after the insert:\r\n\r\n    public static void AddStock(SqliteSession db, string symbol) \r\n\t{\r\n    \tvar s = db.Insert(new Stock() \r\n\t\t{\r\n\t\t\tSymbol = symbol\r\n    \t});\r\n    \tConsole.WriteLine(\"{0} == {1}\", s.Symbol, s.Id);\r\n    }\r\n\r\nYou can query the database using the `Query` method of `SqliteSession`:\r\n\r\n    public static IEnumerable<Valuation> QueryValuations (SqliteSession db, Stock stock)\r\n    {\r\n    \treturn db.Query<Valuation> (\"select * from Valuation where StockId = ?\", stock.Id);\r\n    }\r\n\r\nThe generic parameter to the `Query` method specifies the type of object to create for each row. It can be one of your table classes, or any other class whose public properties match the column returned by the query. For instance, we could rewrite the above query as:\r\n\r\n    public class Val \r\n\t{\r\n    \tpublic decimal Money { get; set; }\r\n    \tpublic DateTime Date { get; set; }\r\n    }\r\n    public static IEnumerable<Val> QueryVals (SqliteSession db, Stock stock)\r\n    {\r\n    \treturn db.Query<Val> (\"select 'Price' as 'Money', 'Time' as 'Date' from Valuation where StockId = ?\", stock.Id);\r\n    }\r\n\r\nUpdates must be performed manually using the `Execute` method of `SqliteSession`.\r\n\r\nMeta\r\n===\r\n\r\nThis library is based on [Frank A. Krueger's](mailto:fak@praeclarum.org) [sqlite-net](https://github.com/praeclarum/sqlite-net) library.\r\n\r\nThis is an open source project that welcomes contributions/suggestions/bug reports from those who use it. If you have any ideas on how to improve the library, please contact [Matthew Leibowitz](mailto:mattleibowmail@gmail.com).\r\n\r\n \r\n","tagline":"A small and light SQLite ORM for use in any .NET project","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Mono.Data.Sqlite.Orm"}